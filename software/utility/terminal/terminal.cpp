/**************************************************************************//**
 * (c) 2022 Ahriman
 * This code is licensed under MIT license (see LICENSE.txt for details)
 *****************************************************************************/

/**
 * @addtogroup terminal
 * @{
 */

/**************************************************************************//**
 * @file        terminal.cpp
 *
 * @brief       Terminal interface for the application
 * 
 * @author      Matthew Krause
 *
 * @date        2022-10-01
 *****************************************************************************/
#include "terminal.h"
#include "command.h"
#include "data.h"
#include "bootloader.h"
#include "crc32.h"
#include <fstream>
#include <sstream>
#include <unistd.h>

#define RANDOM_BYTE_ARRAY_LEN (4096U)

static std::uint8_t rArray[RANDOM_BYTE_ARRAY_LEN] =
{
    0x9c, 0x54, 0x69, 0x2f, 0x34, 0x29, 0x1d, 0xc5, 0xe2, 0x1a, 0x57, 0x21,
    0xbf, 0x9c, 0x40, 0x39, 0x5d, 0xf6, 0x6f, 0x52, 0x94, 0x16, 0xd2, 0x28,
    0x23, 0xb2, 0x64, 0x6b, 0xab, 0x91, 0x72, 0xc7, 0xe1, 0x8c, 0x75, 0x6e,
    0x18, 0x1d, 0xfd, 0x67, 0xab, 0x3d, 0x8c, 0x7, 0x50, 0x10, 0x44, 0x79,
    0x79, 0x72, 0x13, 0xb3, 0x75, 0xc5, 0x37, 0x59, 0x6e, 0x29, 0x2d, 0xf8,
    0x7e, 0x8b, 0xbc, 0x5a, 0x9f, 0xfa, 0x53, 0xe, 0x24, 0xcd, 0x4e, 0xb0,
    0x83, 0x20, 0xc7, 0xc3, 0x69, 0xde, 0x4, 0xb5, 0x60, 0x68, 0x9e, 0x80,
    0xc9, 0xb0, 0x3e, 0x7f, 0x4e, 0x74, 0xc, 0x1a, 0x1c, 0xbd, 0x92, 0x9d,
    0x95, 0x5d, 0x25, 0x66, 0xd2, 0x63, 0x25, 0xe1, 0x28, 0x60, 0x6a, 0xa6,
    0x89, 0x5, 0xb8, 0x52, 0x32, 0xb4, 0x88, 0x57, 0x23, 0x8b, 0xaf, 0xa3,
    0xda, 0x1d, 0x4, 0x29, 0xb3, 0xc5, 0x41, 0x4d, 0x6e, 0xd1, 0x5d, 0xf8,
    0x93, 0x24, 0x36, 0x44, 0xd5, 0x3c, 0xb9, 0xe9, 0x2, 0xa4, 0x7f, 0xfd,
    0x62, 0x6f, 0xcd, 0x6, 0x3b, 0x15, 0xab, 0x66, 0x97, 0xc7, 0x11, 0xaa,
    0x15, 0x83, 0x3e, 0x51, 0x2f, 0xf6, 0x48, 0xad, 0x68, 0xa8, 0xb, 0x90,
    0x62, 0xee, 0xe7, 0xd5, 0x86, 0xe, 0xd5, 0x7f, 0x7e, 0xb3, 0xf4, 0xc4,
    0xe4, 0x9e, 0xda, 0x5f, 0x14, 0x6e, 0x25, 0xb8, 0x14, 0x58, 0x2f, 0x5f,
    0x7f, 0x1e, 0xa7, 0xea, 0xf6, 0x12, 0x6f, 0x1c, 0xf4, 0x20, 0x6e, 0x48,
    0x59, 0xe8, 0xee, 0x4c, 0x0, 0xa1, 0x4c, 0x38, 0xe3, 0xc9, 0xab, 0xc6,
    0xfe, 0xae, 0x81, 0xdb, 0xe6, 0x67, 0x63, 0x34, 0x67, 0x5c, 0x98, 0xb1,
    0xcc, 0xa7, 0xda, 0x9, 0xcd, 0xae, 0xca, 0xdf, 0xbc, 0xb5, 0x2c, 0x47,
    0x1b, 0x77, 0xba, 0xdd, 0xaf, 0xac, 0x9a, 0xbe, 0xaf, 0x1e, 0x93, 0x7b,
    0x12, 0x5c, 0xbe, 0xd5, 0x19, 0xec, 0xd8, 0x8e, 0xdf, 0x7c, 0x92, 0x49,
    0xfc, 0x6c, 0x63, 0xc1, 0x29, 0x4d, 0xff, 0x9f, 0x12, 0x7d, 0xf8, 0x4,
    0xf5, 0x6a, 0x49, 0x36, 0xe4, 0xc6, 0xf5, 0x93, 0x1f, 0xa7, 0x1e, 0x29,
    0xb4, 0xc4, 0xbd, 0xc3, 0x43, 0xbd, 0x6e, 0xf, 0x83, 0xa5, 0x75, 0x6d,
    0x1e, 0x72, 0xb3, 0xd9, 0xd8, 0xa2, 0x39, 0x6f, 0xac, 0xbe, 0x44, 0xfe,
    0x70, 0xf4, 0xd5, 0x76, 0x81, 0xc4, 0x3f, 0xb2, 0x57, 0x4, 0xc7, 0x43,
    0x7d, 0xfc, 0x7b, 0xb9, 0xf1, 0xfc, 0x89, 0x71, 0x94, 0x83, 0x61, 0x7d,
    0xcb, 0x29, 0x6, 0x66, 0xf2, 0x6b, 0xbc, 0xec, 0x53, 0xa7, 0x1, 0xdd,
    0x86, 0xf7, 0x5c, 0xcf, 0x2a, 0x48, 0x4b, 0x13, 0xb1, 0x85, 0xc, 0x87,
    0x4c, 0xb2, 0xe1, 0x7c, 0x1e, 0xc6, 0x9f, 0x42, 0x8f, 0x87, 0xea, 0xad,
    0x57, 0xb, 0x3d, 0x81, 0x25, 0x3b, 0x58, 0xb7, 0xd6, 0xd7, 0x3, 0xc7,
    0x7a, 0x2b, 0xed, 0x8, 0x2a, 0x0, 0x3b, 0x40, 0x64, 0x1e, 0xa6, 0xc7,
    0x61, 0x11, 0x67, 0xe8, 0xa4, 0x39, 0xd1, 0x25, 0xf9, 0xe7, 0xd1, 0x49,
    0xf, 0xfc, 0xa1, 0xf3, 0xda, 0x9e, 0x20, 0xe0, 0x9, 0xef, 0x6d, 0xbd,
    0x15, 0x5a, 0xb3, 0x68, 0x1d, 0x99, 0xe5, 0x35, 0x21, 0xe5, 0x43, 0x21,
    0xdf, 0x38, 0xa9, 0x27, 0x4, 0x80, 0xb4, 0x46, 0xe2, 0x81, 0x2, 0xf6, 0xae,
    0x82, 0x4c, 0x20, 0xc3, 0x89, 0x88, 0xc9, 0xbd, 0x91, 0x4b, 0xc2, 0xdb,
    0xaa, 0x3a, 0x79, 0xc2, 0xeb, 0xc1, 0x23, 0xe, 0x7, 0x59, 0xeb, 0x63,
    0x84, 0x1d, 0x2f, 0xf8, 0x6c, 0x7d, 0xda, 0x8b, 0xce, 0x31, 0x7c, 0x84,
    0x6b, 0x46, 0xa2, 0xd7, 0x51, 0x1e, 0x8b, 0x7d, 0x4d, 0x21, 0x35, 0x57,
    0x2, 0xc8, 0x2c, 0xd5, 0x5d, 0xcc, 0x79, 0x3, 0xa2, 0x37, 0x30, 0xc0,
    0x1b, 0xba, 0x56, 0x24, 0xdb, 0x88, 0xdc, 0x2b, 0x59, 0x76, 0x7e, 0x3,
    0x9d, 0x9a, 0x83, 0xd9, 0x6d, 0xb8, 0xc7, 0x6e, 0x5a, 0xd1, 0x7d, 0x82,
    0xc5, 0x65, 0x8f, 0x13, 0xc4, 0x19, 0x5f, 0xe5, 0xe1, 0xcb, 0x97, 0xcc,
    0xc4, 0x1a, 0x59, 0xe0, 0xa5, 0x2f, 0x4f, 0x22, 0xdb, 0x7d, 0xdb, 0x15,
    0x47, 0x8f, 0xb5, 0x60, 0xe, 0x50, 0xe7, 0x3, 0x94, 0x27, 0x9a, 0xd4, 0x7c,
    0x38, 0x2f, 0xdf, 0xe2, 0xb, 0xdc, 0x5, 0x7a, 0x53, 0xe4, 0xc, 0xb3, 0x3,
    0x56, 0x98, 0x6a, 0x87, 0xff, 0x45, 0xc, 0xe7, 0x2e, 0x7c, 0xdf, 0x41,
    0x23, 0x26, 0x6a, 0xe4, 0x4b, 0xde, 0xa3, 0x4e, 0x9e, 0x86, 0xe1, 0x51,
    0x55, 0xc7, 0x4, 0x4c, 0xe1, 0x7e, 0xbf, 0x5d, 0x4e, 0x9a, 0xe4, 0xb3,
    0x57, 0xce, 0xad, 0x84, 0x35, 0x3b, 0xa5, 0x68, 0x59, 0xb4, 0x52, 0xa4,
    0x93, 0x50, 0x52, 0x20, 0x15, 0xe9, 0x92, 0x1d, 0x1f, 0xa3, 0xf4, 0xfc,
    0xe, 0xbe, 0xf3, 0x7, 0x39, 0xd, 0x3f, 0xef, 0xa0, 0x36, 0x4a, 0x91,
    0xf9, 0xb8, 0x8e, 0xd1, 0x0, 0x7f, 0x98, 0xc3, 0x45, 0x62, 0x3c, 0xde,
    0xc3, 0xde, 0x20, 0xf8, 0xd4, 0x38, 0x67, 0xa8, 0xe5, 0x38, 0x45, 0x48,
    0x44, 0x79, 0x63, 0x7b, 0x27, 0x2d, 0x5f, 0x60, 0x96, 0xd5, 0xde, 0x56,
    0xd3, 0xb7, 0xdd, 0xad, 0xa8, 0x8e, 0x6e, 0x2c, 0xb8, 0xc, 0xe9, 0x6, 0x16,
    0x3c, 0xcf, 0xdb, 0x4c, 0xf2, 0x3b, 0x8, 0x45, 0xbd, 0x43, 0x15, 0xb9,
    0x81, 0xf1, 0x68, 0x42, 0x26, 0xbb, 0xcd, 0xc8, 0xad, 0x78, 0x90, 0x9c,
    0x9, 0xb1, 0x92, 0x74, 0xb2, 0xd7, 0xb8, 0xb9, 0xc8, 0xf7, 0x61, 0x83,
    0x25, 0x4c, 0xd4, 0xd6, 0xbb, 0x1f, 0xff, 0x4b, 0xa6, 0xac, 0xd9, 0x27,
    0xbd, 0x68, 0x92, 0xbf, 0x51, 0x7e, 0x92, 0xfa, 0xa4, 0x7f, 0xa1, 0x7b,
    0x0, 0xcf, 0xf6, 0x78, 0x83, 0xb5, 0x5a, 0x79, 0xa2, 0x2b, 0xf, 0xdd, 0xe9,
    0xcb, 0xcd, 0x3d, 0xaf, 0x48, 0x12, 0xd8, 0xeb, 0x9, 0x94, 0xdb, 0x68,
    0x27, 0xda, 0x88, 0x6a, 0xff, 0xd4, 0xd1, 0x9e, 0xc1, 0xa, 0x97, 0xd, 0x7a,
    0x76, 0x93, 0xc6, 0x66, 0x97, 0xaa, 0x38, 0x38, 0xd8, 0x80, 0x29, 0xfc,
    0x2d, 0x2a, 0x51, 0xdc, 0xe1, 0xee, 0x90, 0x74, 0x7b, 0x51, 0x28, 0xe,
    0xd7, 0x4e, 0x39, 0x18, 0xb8, 0x9e, 0x46, 0x68, 0x92, 0x10, 0xcd, 0xa7,
    0x39, 0xd4, 0xbb, 0xf0, 0x3b, 0x2c, 0xd3, 0xc9, 0x7a, 0x29, 0xcd, 0x63,
    0x68, 0x78, 0x2, 0xbf, 0xe0, 0xec, 0xe5, 0xf5, 0x2f, 0xef, 0xb0, 0x9d,
    0x98, 0x3d, 0x39, 0xa8, 0x96, 0x42, 0xb8, 0xdf, 0xe8, 0xd2, 0x11, 0xde,
    0xb6, 0x36, 0x65, 0xee, 0xac, 0xff, 0x83, 0x23, 0xc4, 0xa0, 0x6e, 0x98,
    0xaa, 0x68, 0xd1, 0x3c, 0x62, 0xd5, 0x71, 0xad, 0x9, 0xaa, 0x24, 0xf0,
    0x51, 0x1e, 0x97, 0x77, 0x47, 0xaa, 0xc2, 0x70, 0x3b, 0x65, 0xe4, 0x48,
    0xb2, 0xb5, 0x93, 0x6e, 0x53, 0x91, 0xb, 0x45, 0x13, 0x73, 0x89, 0x62,
    0x4, 0x80, 0xf0, 0x3f, 0x6d, 0xdc, 0x74, 0x6e, 0xf6, 0xc2, 0x8c, 0xb8,
    0x1, 0x9, 0x70, 0x9, 0x88, 0x79, 0x93, 0x2e, 0x3c, 0x1, 0x8, 0x35, 0xb2,
    0x40, 0x8c, 0x46, 0x14, 0xda, 0x1, 0x8a, 0x7b, 0x89, 0xc9, 0x0, 0xd2, 0x58,
    0x8d, 0x86, 0xda, 0xe1, 0xf1, 0xf4, 0xbd, 0x96, 0xd7, 0x95, 0xf3, 0xc8,
    0x7d, 0x1a, 0x2a, 0x53, 0x1a, 0x4b, 0x9, 0x1a, 0x19, 0x94, 0xef, 0xcf,
    0x76, 0x10, 0x21, 0x47, 0x4a, 0xf8, 0x99, 0x53, 0x40, 0xd, 0xf7, 0xc, 0x4f,
    0x26, 0x3, 0x52, 0x64, 0x2d, 0x65, 0x4a, 0x75, 0x86, 0x7f, 0xa5, 0x11,
    0xb8, 0x3a, 0x63, 0x85, 0x6d, 0x23, 0x8e, 0x52, 0x55, 0xac, 0xd, 0x38,
    0xf8, 0x6d, 0x11, 0x44, 0x3c, 0x39, 0x45, 0x17, 0x33, 0x66, 0xf1, 0x5d,
    0xe5, 0x18, 0xaa, 0x9f, 0x81, 0x7d, 0xd9, 0x7, 0xdc, 0x2c, 0xd5, 0xc2,
    0x81, 0x2c, 0xc0, 0x15, 0xcb, 0x2d, 0x6a, 0x37, 0xdd, 0x4, 0xea, 0xc5,
    0x89, 0x0, 0xdf, 0xc6, 0x6d, 0xb9, 0xe7, 0x50, 0x10, 0x28, 0x9f, 0x6d,
    0xbd, 0xa9, 0x85, 0x8a, 0x96, 0xce, 0x58, 0x8f, 0xab, 0xa6, 0xca, 0xd3,
    0x19, 0xdf, 0x9d, 0xe3, 0x97, 0x48, 0x47, 0xa2, 0x7d, 0xd1, 0xe6, 0x92,
    0xc6, 0x8f, 0xb, 0xc9, 0x2, 0x20, 0xb0, 0x2b, 0xf7, 0xfc, 0x8d, 0xcd, 0x1a,
    0x5a, 0xfe, 0xda, 0xf1, 0x11, 0x1, 0x70, 0xba, 0x4, 0x14, 0x6d, 0x24, 0xc6,
    0x2a, 0x60, 0x22, 0x47, 0xef, 0x15, 0x63, 0xef, 0x7c, 0x48, 0x55, 0x11,
    0xee, 0x39, 0x1c, 0x99, 0xf4, 0xcd, 0x19, 0x2f, 0x19, 0x3d, 0x1f, 0x9e,
    0x6d, 0xcf, 0x6f, 0x65, 0xf2, 0xa5, 0xf1, 0x3, 0x8b, 0x91, 0x58, 0x1d,
    0xe7, 0x4, 0x8b, 0x4d, 0x49, 0x37, 0xed, 0x46, 0x88, 0x2e, 0x7f, 0x96, 0xe,
    0xd7, 0x94, 0xc2, 0xa2, 0x28, 0x36, 0x9c, 0x58, 0x9f, 0xa6, 0x1c, 0xa0,
    0x8a, 0x6d, 0x3c, 0x72, 0x5a, 0xb3, 0xdc, 0x59, 0xd, 0x4, 0x87, 0x88, 0x58,
    0x71, 0xb6, 0x4, 0xaf, 0xfe, 0x69, 0x11, 0xd4, 0x83, 0x69, 0x31, 0x8e,
    0x7a, 0x33, 0x90, 0x3b, 0xe7, 0xa8, 0x26, 0x73, 0x2a, 0x36, 0x7b, 0x9a,
    0xe7, 0xa0, 0x93, 0x7e, 0x57, 0x16, 0xf9, 0xec, 0x34, 0xea, 0x47, 0x13,
    0x38, 0xca, 0xdc, 0xbe, 0xc2, 0x3f, 0xbe, 0x22, 0x28, 0x2, 0x39, 0x53,
    0x87, 0x9, 0x61, 0xc0, 0x36, 0x3f, 0x9, 0x9a, 0xc, 0xe0, 0xc7, 0xdd, 0xc5,
    0x1a, 0x98, 0x4c, 0x27, 0xbf, 0x3a, 0x5a, 0x9a, 0x18, 0x20, 0xd, 0x6d,
    0xaf, 0xd, 0xe7, 0x33, 0xd7, 0x87, 0x62, 0xe4, 0x1f, 0xc1, 0x3c, 0x27,
    0x24, 0x40, 0xd6, 0xda, 0x50, 0x61, 0xfd, 0x87, 0x4d, 0x17, 0xf0, 0x4d,
    0xcc, 0xa3, 0xcb, 0x7f, 0xda, 0x74, 0x3d, 0xe2, 0x75, 0xf5, 0x34, 0x14,
    0xa3, 0x60, 0x3b, 0x89, 0x3c, 0x9f, 0x80, 0xaa, 0x72, 0x52, 0x45, 0xf9,
    0xc4, 0x59, 0x7a, 0xb6, 0x7d, 0x47, 0xc0, 0x60, 0x3f, 0x84, 0x2e, 0x1,
    0x64, 0x13, 0xf8, 0x1e, 0x4b, 0xeb, 0x8f, 0xbf, 0xa4, 0xc4, 0xc3, 0x71,
    0x91, 0xa3, 0xa4, 0xda, 0x48, 0x91, 0x23, 0xc0, 0x60, 0x4b, 0x6c, 0x2a,
    0xa6, 0x55, 0x49, 0x1c, 0xed, 0x8e, 0x54, 0x95, 0x79, 0xf7, 0x59, 0x3f,
    0x26, 0x3b, 0x2e, 0xc9, 0x86, 0xb8, 0xa8, 0x71, 0x66, 0x3f, 0x3d, 0x8a,
    0x5b, 0x7d, 0xc6, 0x8e, 0x2f, 0x80, 0x2e, 0x2, 0x98, 0x5a, 0x65, 0xac, 0x2,
    0xea, 0xea, 0x49, 0x81, 0xf4, 0xe3, 0x2b, 0x2b, 0xde, 0x6d, 0x8b, 0x8b,
    0xe6, 0x5d, 0xd3, 0xe9, 0x71, 0x90, 0xef, 0xe3, 0x44, 0xb7, 0x80, 0xb2,
    0x4e, 0x53, 0x69, 0x32, 0xe, 0xb2, 0x5c, 0xac, 0xc6, 0x72, 0x9d, 0xed,
    0x11, 0x61, 0x3a, 0x20, 0x3, 0x7a, 0x27, 0xc6, 0x14, 0x27, 0x3a, 0x3e,
    0x47, 0x80, 0xd, 0x7c, 0x19, 0x31, 0xe8, 0x21, 0x8d, 0x4, 0x4, 0xe, 0x76,
    0x55, 0x55, 0xf7, 0x6a, 0x86, 0xac, 0x6c, 0x8b, 0x48, 0x94, 0x91, 0xe9,
    0x1f, 0x71, 0x19, 0xcd, 0xab, 0xaa, 0x4b, 0x48, 0x8b, 0xe0, 0xf1, 0x8,
    0x35, 0x73, 0xb8, 0x3e, 0x2, 0xd0, 0x44, 0x44, 0x29, 0xee, 0x9c, 0xc2,
    0xe4, 0x41, 0x37, 0x67, 0xfe, 0xa2, 0x72, 0x6f, 0xc9, 0x30, 0xf6, 0xd,
    0x63, 0x50, 0xdb, 0xd6, 0x8, 0x4a, 0x4c, 0x4d, 0x57, 0xfe, 0x92, 0x2b,
    0xef, 0xfa, 0xf5, 0xa2, 0xac, 0x88, 0x53, 0x33, 0xc3, 0x3, 0xb6, 0x75,
    0x34, 0x1c, 0x8e, 0x93, 0x84, 0x9, 0x9a, 0xfc, 0x29, 0x28, 0x3b, 0x8f,
    0x17, 0xf6, 0x8b, 0xe7, 0x5f, 0x3d, 0x39, 0xc5, 0xf6, 0x24, 0x56, 0xfe,
    0xb9, 0xc3, 0x57, 0xbb, 0xe3, 0x67, 0xbf, 0xe5, 0x5a, 0xc7, 0xb1, 0xb7,
    0xb, 0x64, 0xc, 0x1f, 0x48, 0x8b, 0xe2, 0xe1, 0x57, 0x87, 0x72, 0xce, 0x45,
    0x44, 0x5c, 0x4e, 0x6a, 0x45, 0xc1, 0x70, 0x47, 0xe9, 0x8, 0x1a, 0x28,
    0xbb, 0xe0, 0x80, 0x90, 0x6f, 0x33, 0xe, 0xea, 0xdd, 0x5c, 0x97, 0xfd,
    0xe2, 0x6d, 0xbd, 0x9a, 0xb8, 0x2e, 0x23, 0xd0, 0xca, 0x9c, 0x74, 0x32,
    0x50, 0xdc, 0xc8, 0x9d, 0xd3, 0xe5, 0x1d, 0x44, 0xd7, 0x1f, 0xed, 0xb9,
    0x3a, 0x92, 0x4b, 0x50, 0x7e, 0x8e, 0x96, 0xf4, 0xee, 0x72, 0x19, 0xc6,
    0x35, 0x16, 0x21, 0x4c, 0xc, 0x3c, 0x74, 0x9a, 0x71, 0xd5, 0xbf, 0x95,
    0xfe, 0x5d, 0xbf, 0xac, 0xfb, 0x58, 0x98, 0xdf, 0x9c, 0x86, 0x7d, 0xd3,
    0xfb, 0xf0, 0x2c, 0xaa, 0x8f, 0xf3, 0x88, 0x78, 0xd1, 0x5a, 0xf, 0xa5,
    0x19, 0xb1, 0x4b, 0xb9, 0xb1, 0x5f, 0x2e, 0x3a,0x15, 0x45, 0xe3, 0xa2,
    0x8c, 0xa0, 0x18, 0x17, 0x4a, 0x63, 0x6e, 0x3b, 0x5c, 0xff, 0xe6, 0x60,
    0x22, 0xa7, 0x8c, 0xb6, 0x5b, 0xa5, 0x4b, 0x6b, 0xc8, 0xdb, 0x31, 0x2a,
    0xd3, 0x60, 0x1d, 0x78, 0x43, 0x17, 0x5e, 0xf3, 0xf7, 0x37, 0x5a, 0x91,
    0x29, 0x6f, 0x1, 0xb9, 0x7d, 0x5c, 0x84, 0x3b, 0xeb, 0xf8, 0x68, 0x7d,
    0xf9, 0x27, 0x35, 0x30, 0xd1, 0x74, 0x91, 0xdd, 0x81, 0x44, 0x9a, 0xa8,
    0x69, 0xbd, 0x84, 0x81, 0xbf, 0xf4, 0x18, 0x2f, 0xb6, 0xcc, 0x70, 0x41,
    0x3e, 0xfe, 0x83, 0x9e, 0xdb, 0xed, 0xa1, 0x9b, 0x23, 0xfe, 0xbf, 0x94,
    0x30, 0xec, 0x3c, 0xca, 0x50, 0x1b, 0x1e, 0x65, 0xac, 0x58, 0x37, 0xfb,
    0x56, 0xc2, 0x37, 0x45, 0x1a, 0x3f, 0x87, 0x64, 0xa0, 0x13, 0xc6, 0x44,
    0x4b, 0x9b, 0x2b, 0xda, 0xe7, 0x39, 0x27, 0xd9, 0xa2, 0xa9, 0x8d, 0x8e,
    0xd9, 0xc2, 0x9e, 0xb1, 0x9c, 0xf, 0xbe, 0xf8, 0x85, 0x6a, 0x2, 0xa6, 0xbb,
    0x59, 0x8f, 0x92, 0xab, 0x76, 0xa4, 0x1c, 0x31, 0x86, 0x47, 0x99, 0x1e,
    0x4f, 0xb, 0xc5, 0x60, 0x32, 0xf2, 0xce, 0xdb, 0x48, 0x63, 0xe8, 0x2b,
    0x6f, 0x7e, 0x68, 0xd4, 0x2a, 0xfd, 0x97, 0x86, 0x68, 0x5c, 0xd0, 0x3a,
    0x26, 0xb8, 0x2e, 0x48, 0x75, 0x1b, 0x20, 0xa7, 0x90, 0x44, 0xf6, 0x89,
    0x5, 0x90, 0x97, 0x7e, 0x96, 0xad, 0xd5, 0x9a, 0x88, 0x95, 0xba, 0xfd,
    0xf4, 0x63, 0x4e, 0xa7, 0x71, 0x94, 0xc1, 0xe8, 0x0, 0x3b, 0x5, 0x52, 0xb0,
    0xac, 0x39, 0x3c, 0xff, 0xd, 0xfe, 0xc1, 0x69, 0xac, 0xe9, 0x2b, 0x7f,
    0x37, 0x4b, 0x83, 0x79, 0x2b, 0xaf, 0x3b, 0x13, 0x36, 0xe8, 0xe7, 0xe7,
    0x87, 0x35, 0xf, 0x70, 0x2e, 0xe3, 0x51, 0x67, 0x52, 0x42, 0x7a, 0x53,
    0xbc, 0x1f, 0x28, 0x98, 0x1, 0x9c, 0xc1, 0x60, 0x6c, 0x99, 0xed, 0xc8,
    0xfc, 0x9a, 0x3b, 0x26, 0x15, 0xdd, 0x3a, 0x3c, 0x57, 0xee, 0x2d, 0xbe,
    0x8f, 0x4a, 0x8a, 0x61, 0xf6, 0x4b, 0xf9, 0xc8, 0x10, 0x5e, 0x36, 0x95,
    0xdd, 0xdd, 0x51, 0x1, 0xd2, 0x47, 0x8f, 0x91, 0x55, 0x65, 0x78, 0x7, 0x13,
    0xb1, 0x5, 0x9, 0x9c, 0x95, 0xb3, 0xb0, 0xa6, 0xd3, 0x15, 0x39, 0xbb, 0x81,
    0x16, 0xe0, 0x56, 0x73, 0x25, 0x6a, 0xe8, 0x39, 0xc9, 0x42, 0x29, 0x69,
    0x47, 0x9f, 0xf, 0x6e, 0x42, 0x32, 0x2d, 0x1c, 0xc0, 0xed, 0xec, 0xc8,
    0x2d, 0xc7, 0x69, 0xd3, 0xd1, 0x33, 0x1e, 0x25, 0xf2, 0xac, 0xad, 0xdf,
    0xe, 0x21, 0x31, 0xd7, 0xf1, 0xa0, 0x40, 0xd, 0xa5, 0x90, 0x2e, 0xb3, 0xcf,
    0x9d, 0x9b, 0x43, 0x50, 0xf6, 0x86, 0x26, 0xa0, 0xc0, 0x23, 0x6e, 0x74,
    0x9f, 0x95, 0xb0, 0x92, 0x69, 0xe9, 0x37, 0x38, 0xb8, 0xaf, 0xa1, 0xb7,
    0xc2, 0xa7, 0x36, 0x33, 0xe6, 0x39, 0xa0, 0xd0, 0xb4, 0xa2, 0x33, 0x99,
    0xc2, 0x1a, 0x54, 0xb7, 0x5e, 0x2e, 0xd2, 0x9a, 0xab, 0x9f, 0x98, 0x59,
    0x81, 0xf2, 0xdc, 0x5a, 0xa0, 0xf4, 0x59, 0xad, 0x23, 0x84, 0xca, 0x7d,
    0xba, 0x6, 0xcc, 0xaa, 0x90, 0x7, 0x74, 0x5c, 0x9, 0x6c, 0x4f, 0x31, 0x52,
    0xb4, 0x8e, 0x5c, 0x13, 0x80, 0x11, 0x72, 0x15, 0xa1, 0x86, 0x7f, 0xa1,
    0x58, 0xf9, 0x1a, 0x3d, 0xe2, 0xb7, 0x48, 0x1b, 0x1d, 0x16, 0xf8, 0x51,
    0xc2, 0x64, 0xb5, 0xd2, 0x2c, 0x6c, 0xfd, 0x29, 0x8d, 0xd0, 0x84, 0x18,
    0x11, 0xc2, 0xe3, 0xf, 0x22, 0x21, 0x8, 0xad, 0xa9, 0xdf, 0xcc, 0xc4, 0xc9,
    0x0, 0x32, 0x24, 0xee, 0x36, 0xd9, 0x4, 0xb9, 0xee, 0x83, 0x2a, 0x33, 0xd3,
    0xf2, 0x6b, 0xdb, 0xcd, 0x87, 0x40, 0x5d, 0xf3, 0x9e, 0x78, 0x1c, 0x9e,
    0x2b, 0x18, 0x81, 0x2e, 0x42, 0xa1, 0xf, 0x8b, 0x68, 0xae, 0xb2, 0x96,
    0x5a, 0xf8, 0x8c, 0x44, 0xde, 0xed, 0x37, 0xd9, 0x47, 0x67, 0x15, 0x84,
    0x16, 0x17, 0x48, 0xcd, 0x1, 0x12, 0x69, 0x8e, 0x90, 0x93, 0x3e, 0x9a,
    0xcb, 0x8e, 0xaf, 0xbf, 0x99, 0x7e, 0xf1, 0x3d, 0x52, 0x36, 0x5b, 0x7d,
    0x94, 0xfa, 0xfb, 0x2d, 0x9b, 0x77, 0x74, 0x7f, 0x14, 0xf7, 0x6d, 0xf,
    0xd1, 0x71, 0x55, 0x8c, 0x28, 0xef, 0x33, 0xb1, 0xc6, 0x29, 0xe8, 0xd4,
    0x3e, 0x6d, 0x96, 0x13, 0xaf, 0x99, 0xb5, 0x7c, 0xd0, 0x21, 0x54, 0x1f,
    0xa1, 0xa0, 0xe7, 0x23, 0x5a, 0xde, 0x91, 0x64, 0xd1, 0x2, 0x17, 0x13,
    0x7f, 0x8, 0xe0, 0xc9, 0x92, 0x63, 0xc4, 0xa7, 0x5b, 0xdb, 0xb6, 0x9d,
    0xf8, 0x19, 0xd, 0xdd, 0x10, 0xae, 0x3e, 0x48, 0xa3, 0xa2, 0x41, 0x86,
    0x2b, 0x7b, 0x6f, 0x77, 0x80, 0x70, 0x3d, 0x9d, 0xab, 0x8, 0xde, 0x58, 0x8,
    0x1d, 0xc2, 0x42, 0x27, 0x77, 0x8d, 0xf1, 0x25, 0x8d, 0x17, 0xde, 0x69,
    0xaf, 0x22, 0x3c, 0x36, 0x21, 0x94, 0x1f, 0x93, 0x7b, 0x5e, 0xa9, 0xa7,
    0x1c, 0x9c, 0xf6, 0x1b, 0xca, 0x19, 0xf1, 0x64, 0x71, 0x2c, 0xf3, 0x6c,
    0xbe, 0xee, 0xc6, 0xda, 0x9f, 0xb9, 0xaa, 0x5c, 0xee, 0x5f, 0x8e, 0x22,
    0x1e, 0x55, 0x1b, 0x77, 0x28, 0x68, 0x8c, 0x6b, 0x1a, 0x6f, 0xe3, 0xf0,
    0xed, 0xaf, 0x87, 0x21, 0x98, 0xab, 0x8b, 0x38, 0xae, 0xe, 0x1a, 0x63,
    0xea, 0x39, 0xa6, 0xfd, 0xde, 0x29, 0x1e, 0x61, 0xa1, 0xf8, 0x25, 0xce,
    0xa3, 0x38, 0x4d, 0x10, 0xec, 0xe4, 0xd6, 0x1f, 0x45, 0x3d, 0x43, 0xa4,
    0x26, 0x3b, 0x23, 0xb7, 0x94, 0x57, 0x5a, 0x68, 0xc5, 0xf2, 0x3, 0xf4,
    0x30, 0xe, 0xf3, 0x2e, 0xf1, 0x5e, 0xa3, 0xb2, 0x5f, 0x89, 0xa5, 0x84,
    0x9e, 0xe1, 0xf3, 0xd2, 0x3e, 0x27, 0xbe, 0xf5, 0x43, 0xeb, 0x99, 0x9e,
    0xb2, 0x2d, 0x86, 0x20, 0x9c, 0xea, 0xc0, 0xc0, 0xda, 0x70, 0x91, 0xe3,
    0x32, 0x19, 0x16, 0x8, 0x32, 0xe8, 0xde, 0x99, 0x8b, 0x3b, 0x70, 0xb8,
    0x49, 0x81, 0x57, 0x59, 0xb4, 0x5, 0x4b, 0xf6, 0x85, 0xb5, 0x95, 0xb3,
    0xcd, 0xb, 0xbe, 0xb3, 0x3b, 0x21, 0x43, 0xfc, 0xbc, 0x83, 0x12, 0x56,
    0x6e, 0xd6, 0x39, 0x4c, 0xc, 0xd8, 0xe8, 0xfc, 0xe5, 0xa2, 0xdb, 0x7b,
    0xed, 0x5, 0xf, 0xd2, 0x78, 0x60, 0xda, 0xdd, 0x17, 0xf2, 0xbc, 0xd1, 0x65,
    0x13, 0x42, 0xe5, 0x9a, 0x3b, 0x28, 0xc7, 0x67, 0xbc, 0xa7, 0x2b, 0x88,
    0x7b, 0x24, 0xa9, 0xa5, 0x2c, 0xfc, 0x99, 0xec, 0x68, 0x4a, 0xbd, 0x62,
    0x7a, 0x45, 0x22, 0xbe, 0xa7, 0x7b, 0x4d, 0x47, 0x52, 0xaa, 0x73, 0xde,
    0x3, 0x91, 0x5c, 0x34, 0x5, 0x56, 0x83, 0x4d, 0x21, 0x45, 0x88, 0x9c, 0x51,
    0x2c, 0x20, 0x87, 0xfa, 0xda, 0x5, 0xda, 0x81, 0xee, 0x74, 0xa0, 0x3b,
    0x43, 0xfe, 0xf1, 0x58, 0x35, 0xb7, 0x8b, 0x9e, 0x33, 0x8a, 0x9a, 0xf,
    0xfc, 0x9c, 0xa0, 0x1b, 0x65, 0xd1, 0x51, 0x42, 0x6f, 0xb6, 0x74, 0xf8,
    0xd, 0xe0, 0x62, 0xcd, 0x7f, 0xc8, 0xac, 0xa7, 0x4b, 0x63, 0xe3, 0x9f,
    0xc2, 0x3d, 0xf2, 0x1a, 0x40, 0xb0, 0x54, 0x78, 0x95, 0x0, 0xf1, 0x6e,
    0x9f, 0xa3, 0x4f, 0x28, 0x23, 0xf4, 0xc1, 0xd4, 0xb8, 0x2b, 0x51, 0x16,
    0x7e, 0xad, 0x43, 0xb3, 0x54, 0x0, 0x15, 0x78, 0x70, 0xab, 0xe2, 0x2a,
    0xf2, 0x8b, 0xbd, 0x64, 0x90, 0xb2, 0x77, 0xd9, 0x43, 0x42, 0x6e, 0xea,
    0x4c, 0x38, 0x8, 0xae, 0xd8, 0x8a, 0xce, 0xf5, 0x5c, 0xb2, 0x64, 0xdd,
    0xbc, 0xb8, 0x82, 0x9d, 0x6c, 0xef, 0x9e, 0x5a, 0xe4, 0x4a, 0x53, 0xcb,
    0x7a, 0x1a, 0xf5, 0x8a, 0xb6, 0x70, 0x1c, 0xd5, 0x4, 0xaa, 0x9, 0xf1, 0x69,
    0x58, 0xcb, 0xe6, 0x4d, 0xa5, 0x2d, 0xe1, 0x23, 0x2e, 0xe1, 0xa3, 0xc4,
    0xeb, 0x54, 0x8a, 0x5f, 0x6a, 0xb3, 0xff, 0xd5, 0xb0, 0xcd, 0x5a, 0x13,
    0xcc, 0x12, 0x5e, 0xa9, 0x8d, 0xf5, 0xc4, 0x87, 0x44, 0x91, 0x92, 0x2a,
    0xf9, 0xc8, 0x92, 0x2a, 0x62, 0xdf, 0xd6, 0xc0, 0x6b, 0x5d, 0xfd, 0xe1,
    0x5, 0x92, 0x45, 0x71, 0x1d, 0x61, 0xc4, 0x90, 0x33, 0x1c, 0xe3, 0xe, 0xa5,
    0xa0, 0x3c, 0xc3, 0x27, 0x9e, 0xc2, 0x61, 0xf3, 0x74, 0xe6, 0xa4, 0x73,
    0x24, 0xa, 0x28, 0x1d, 0x63, 0x9f, 0x98, 0x10, 0x83, 0xfc, 0x16, 0x69,
    0xa2, 0xb2, 0x3d, 0x90, 0x11, 0xc4, 0x2b, 0xf8, 0x1b, 0x74, 0xa9, 0x49,
    0xad, 0xf0, 0x1, 0x71, 0xd5, 0xb7, 0xfe, 0x86, 0x5b, 0x8e, 0x8c, 0x33, 0x8,
    0x8f, 0x46, 0x0, 0xda, 0x80, 0xf4, 0x8b, 0x5a, 0xeb, 0x4b, 0x7b, 0xb5,
    0x34, 0x8, 0xcd, 0x70, 0x43, 0xd5, 0x14, 0x94, 0x83, 0xfb, 0x39, 0xd1, 0x4,
    0x60, 0x33, 0xc, 0x80, 0x62, 0x67, 0x3a, 0x3b, 0xc6, 0x93, 0x25, 0x36,
    0x19, 0x4d, 0x1c, 0xa9, 0x6e, 0x1e, 0x4, 0x88, 0x4e, 0x1f, 0xae, 0xc4,
    0x6a, 0xc8, 0x6b, 0x3b, 0xcf, 0xe8, 0x3b, 0x1a, 0x3c, 0x1a, 0xb4, 0x8f,
    0x3f, 0x8b, 0xd9, 0x4f, 0x45, 0xb, 0xb9, 0xc2, 0x53, 0x9d, 0xc7, 0xbe,
    0x35, 0xb4, 0x6a, 0x78, 0x7b, 0x74, 0x6, 0x81, 0x73, 0x56, 0xc9, 0x6e,
    0x8e, 0xe5, 0xda, 0xb9, 0xf4, 0x23, 0xc4, 0x3d, 0xa, 0x99, 0xc7, 0x29,
    0xbf, 0x4e, 0x30, 0xbe, 0xbd, 0x2a, 0x8f, 0x3a, 0xa4, 0x69, 0x4e, 0xc,
    0xa4, 0xec, 0xfb, 0xfd, 0x39, 0x48, 0xe0, 0xe8, 0x17, 0x4a, 0x37, 0xf1,
    0xfb, 0xe5, 0x4b, 0xf1, 0x33, 0x1f, 0xa5, 0x25, 0x14, 0x64, 0xf9, 0x87,
    0xa1, 0x34, 0x19, 0x9b, 0x48, 0x8b, 0x8f, 0x68, 0x24, 0xf5, 0xad, 0x49,
    0xfe, 0x44, 0x87, 0xf6, 0xd2, 0x5, 0x89, 0x38, 0xf6, 0xd5, 0x77, 0x72,
    0x78, 0xc1, 0xb8, 0xe0, 0x6, 0x1b, 0x7a, 0x15, 0x88, 0x41, 0xff, 0x6a,
    0x33, 0xfe, 0x19, 0xb9, 0x98, 0xcd, 0xb2, 0xa1, 0x3d, 0x61, 0x17, 0x85,
    0x73, 0xd2, 0x75, 0xa7, 0xdb, 0xf5, 0x7b, 0xc6, 0x8c, 0x28, 0xd7, 0xd0,
    0x90, 0x64, 0x7c, 0x18, 0x20, 0xc1, 0xff, 0x20, 0x50, 0xe1, 0x78, 0x48,
    0x9e, 0x13, 0xd3, 0x8a, 0x86, 0x5b, 0x35, 0xe4, 0x13, 0x5f, 0x84, 0x90,
    0x2, 0xc4, 0xab, 0x88, 0x25, 0x13, 0xef, 0xfd, 0x9a, 0xd1, 0x95, 0x3b,
    0xb4, 0xb3, 0x55, 0x94, 0x36, 0x9e, 0xad, 0x1c, 0x76, 0xb9, 0xa7, 0x2,
    0xa5, 0x77, 0x7d, 0xed, 0x86, 0x3d, 0x34, 0x8f, 0xfa, 0x79, 0xd7, 0xfa,
    0x73, 0x58, 0xe7, 0xa0, 0x1, 0x3d, 0x7a, 0xe4, 0x9b, 0x6a, 0x11, 0x5b,
    0xf9, 0x3, 0x92, 0x3d, 0x7b, 0xb7, 0xba, 0x38, 0x1e, 0xf, 0x48, 0xf1, 0x72,
    0x42, 0x90, 0xf6, 0x66, 0x60, 0xdd, 0xd4, 0x27, 0x3f, 0xdf, 0xe7, 0x0,
    0xd7, 0x18, 0x90, 0x8b, 0x96, 0x34, 0x8a, 0x13, 0x51, 0x94, 0xae, 0xf7,
    0x1f, 0x30, 0x28, 0xe, 0x26, 0x28, 0x23, 0xd9, 0x8f, 0x5, 0xe8, 0x31, 0xd8,
    0x5, 0x64, 0x4d, 0x51, 0x77, 0xe7, 0xb7, 0x4a, 0xcf, 0xd2, 0xb, 0x4b, 0x82,
    0x48, 0x10, 0xf6, 0x18, 0xb3, 0xa3, 0x56, 0x51, 0x72, 0xc3, 0xe7, 0x2c,
    0xf4, 0x39, 0x14, 0xda, 0x67, 0xdd, 0xe6, 0x17, 0x5e, 0x28, 0x96, 0x8,
    0x19, 0x20, 0x42, 0xa3, 0x6e, 0xff, 0xc6, 0x89, 0x28, 0x8c, 0x6, 0x97,
    0x15, 0xa5, 0x82, 0x8, 0x88, 0xe2, 0x7c, 0xf0, 0x8b, 0x4e, 0x74, 0xf5,
    0xdd, 0xc9, 0x14, 0x34, 0x67, 0xf7, 0xd, 0xc5, 0xa3, 0x80, 0x7d, 0x93,
    0xc6, 0x43, 0xd6, 0x69, 0xe5, 0xda, 0x79, 0x7b, 0x2c, 0x11, 0xe3, 0x22,
    0xc8, 0x69, 0xaf, 0xe, 0x8f, 0x61, 0xbc, 0x1e, 0xe2, 0x21, 0x25, 0xc4,
    0xd5, 0x99, 0xa3, 0xd3, 0x83, 0x18, 0x3, 0x25, 0x44, 0x62, 0xe5, 0x4d,
    0x91, 0x78, 0xf0, 0x6c, 0x8a, 0xd0, 0xe4, 0xe2, 0x10, 0x77, 0x64, 0x15,
    0xa5, 0x83, 0x7f, 0x33, 0x71, 0xb5, 0xdf, 0xc7, 0xf1, 0xf0, 0xdb, 0x9b,
    0xae, 0x83, 0x3c, 0x9c, 0x99, 0x56, 0xde, 0x52, 0x38, 0xf7, 0x89, 0x85,
    0xd6, 0xf, 0xe6, 0x20, 0x76, 0xf8, 0x92, 0x82, 0x13, 0xf0, 0xa8, 0x6e,
    0xc7, 0xee, 0x77, 0xdf, 0x97, 0xaf, 0x90, 0x2f, 0xc8, 0x9b, 0x56, 0xb,
    0xa9, 0x87, 0xba, 0xd9, 0xb5, 0x3f, 0xdf, 0xf8, 0x12, 0x31, 0xf7, 0x39,
    0xad, 0x2d, 0x8a, 0x47, 0xc9, 0x38, 0x6d, 0x9d, 0x27, 0x2e, 0x6, 0x88,
    0x35, 0xad, 0xab, 0x3, 0x8a, 0xdf, 0x8, 0x8f, 0x48, 0xde, 0xb8, 0xf7, 0xaa,
    0xe7, 0xa1, 0x56, 0x5f, 0x36, 0x7d, 0xe6, 0x5f, 0xe2, 0x42, 0x2e, 0x4a,
    0xce, 0x55, 0xed,0x3e, 0xc6, 0x13, 0xbd, 0xff, 0xe2, 0x4e, 0x71, 0x94,
    0x3f, 0x12, 0x29, 0x4d, 0x94, 0x0, 0x75, 0xd6, 0x8e, 0x82, 0xd8, 0xd6,
    0xba, 0xd2, 0x80, 0xae, 0x9b, 0x68, 0x7e, 0xae, 0xdf, 0x31, 0x55, 0x3e,
    0xf4, 0xd3, 0xe6, 0x10, 0x7, 0x5f, 0x14, 0xf5, 0x7a, 0x67, 0x46, 0x6b,
    0xe9, 0x6, 0xfc, 0xc6, 0xfb, 0x74, 0x43, 0x42, 0xc3, 0xdc, 0x94, 0x12,
    0xe0, 0xc1, 0xa3, 0x21, 0x7d, 0x8a, 0x3d, 0xd6, 0xd8, 0x3c, 0x66, 0xcd,
    0x4f, 0xf9, 0xe5, 0x75, 0x68, 0x81, 0xb7, 0xb6, 0xeb, 0x9d, 0xa3, 0xb4,
    0x22, 0xd3, 0x61, 0xd, 0x49, 0x57, 0x35, 0xc2, 0x2d, 0x44, 0x8d, 0x2, 0x27,
    0xac, 0xa5, 0x14, 0xf1, 0x16, 0x3, 0xba, 0x10, 0x55, 0x4, 0xfb, 0x73, 0x7d,
    0x2a, 0xc3, 0x1d, 0x8e, 0xa2, 0xb5, 0x3d, 0x4f, 0xf6, 0xa8, 0x46, 0xda,
    0x9a, 0x74, 0xc7, 0x30, 0xc5, 0x53, 0xfe, 0x17, 0x9a, 0xf1, 0x88, 0xc0,
    0xf2, 0xbd, 0x3a, 0xe8, 0xc6, 0xeb, 0x2b, 0xcb, 0x45, 0x86, 0x6, 0xb1,
    0x28, 0x3d, 0xbf, 0x94, 0x41, 0xf5, 0xb5, 0xab, 0xdf, 0xf8, 0x62, 0x1c,
    0x73, 0xdb, 0xb6, 0xe0, 0x61, 0x51, 0x9c, 0x57, 0xa, 0x73, 0x10, 0xa7,
    0x12, 0xf4, 0x98, 0x85, 0x7e, 0x9b, 0x96, 0xdb, 0xcf, 0xc5, 0xe5, 0x4d,
    0x96, 0x23, 0xc, 0xab, 0xd8, 0x1a, 0x1a, 0x4, 0x20, 0xb9, 0x3b, 0xf6, 0xf0,
    0xc8, 0x54, 0x81, 0xfc, 0x9b, 0x66, 0xbb, 0xb5, 0x19, 0x2c, 0xc1, 0xf,
    0xd9, 0x8d, 0xc3, 0xf3, 0x8e, 0xd2, 0xe7, 0x8d, 0x44, 0x1c, 0x31, 0x5a,
    0x3b, 0x15, 0xd5, 0x9e, 0xb2, 0xa1, 0x77, 0x9c, 0xbe, 0xca, 0xaa, 0xbe,
    0x2f, 0xdc, 0x31, 0x89, 0x46, 0x24, 0x5e, 0xd9, 0x1d, 0x72, 0x85, 0x11,
    0x3d, 0xd4, 0x6, 0x26, 0xd3, 0x4c, 0xa4, 0xfa, 0x9b, 0x8b, 0xb1, 0xe, 0x63,
    0x2, 0x49, 0xe1, 0xc7, 0xc9, 0x7f, 0x0, 0x5b, 0x1e, 0x55, 0xe, 0xaa, 0x8c,
    0x23, 0x65, 0x4c, 0x97, 0x99, 0xb6, 0x91, 0xdf, 0xb2, 0x86, 0xa4, 0xca,
    0xea, 0x94, 0x28, 0xd, 0x47, 0xa7, 0x2, 0xde, 0x51, 0x48, 0x52, 0xa2, 0xa9,
    0x2c, 0xd1, 0xed, 0xb8, 0x77, 0x6c, 0x9c, 0xa6, 0x9f, 0x5d, 0x3d, 0xb0,
    0xf3, 0xa9, 0xe9, 0x97, 0xe2, 0x41, 0x71, 0x1a, 0x62, 0x38, 0xbc, 0xec,
    0x4d, 0x7f, 0x3d, 0x2e, 0xd0, 0x83, 0x49, 0xd4, 0x3b, 0xdb, 0x26, 0x85,
    0x9, 0x5, 0xb8, 0xb9, 0x1e, 0xff, 0x6a, 0xda, 0x19, 0xce, 0x6d, 0xc5, 0x5d,
    0x71, 0x2f, 0x3f, 0xc8, 0xb5, 0x96, 0x20, 0x13, 0xe2, 0xac, 0xd6, 0x78,
    0x65, 0xf, 0x5e, 0xf, 0xe6, 0xb, 0x9b, 0x64, 0x25, 0xb0, 0x4a, 0x78, 0x22,
    0xa1, 0xf5, 0x1, 0xa3, 0xb6, 0x26, 0xc3, 0xc9, 0x42, 0x45, 0xb6, 0x76,
    0xeb, 0x7d, 0x75, 0x46, 0x30, 0x6c, 0xf5, 0xe, 0xa0, 0xfc, 0xc6, 0x3b,
    0x3d, 0x80, 0x41, 0x99, 0xdd, 0x55, 0x5e, 0xec, 0x58, 0xc8, 0xd7, 0x94,
    0xd0, 0x9c, 0x50, 0x30, 0x4d, 0xab, 0xae, 0xa, 0x61, 0xa0, 0x19, 0x58,
    0xbf, 0x9a, 0x9a, 0xb8, 0xd0, 0x14, 0x53, 0x2f, 0xc1, 0xb0, 0xf1, 0x34,
    0x9c, 0x87, 0xa2, 0xff, 0x77, 0x35, 0x7d, 0x70, 0xe7, 0x1a, 0xf5, 0x2f,
    0x2a, 0x2d, 0xba, 0x19, 0x7b, 0xb5, 0xf, 0x5e, 0x8f, 0x20, 0x80, 0x24, 0xb,
    0x34, 0xd9, 0xc6, 0x10, 0x9f, 0xe2, 0xd8, 0x39, 0xed, 0xa7, 0x36, 0x28,
    0x9b, 0x21, 0x97, 0xe7, 0x89, 0xc, 0x4f, 0xf9, 0x47, 0xef, 0x85, 0x76,
    0xcc, 0x11, 0xe2, 0x63, 0xc5, 0xff, 0xe5, 0xe1, 0xf0, 0xb4, 0xc3, 0x44,
    0x89, 0x13, 0xd3, 0x24, 0xb0, 0xa6, 0xad, 0x85, 0xd6, 0x93, 0xa8, 0x2d,
    0xde, 0x6d, 0xb2, 0x8, 0x9c, 0xb8, 0x18, 0x8a, 0x27, 0x16, 0x48, 0x28,
    0xd4, 0xb7, 0xbf, 0xb8, 0x30, 0x67, 0x38, 0xe4, 0x98, 0xa5, 0x98, 0xd,
    0xb9, 0x97, 0x7b, 0x9e, 0xc3, 0x32, 0xaf, 0x88, 0x8e, 0xd0, 0x1, 0xe5,
    0x1b, 0x4f, 0xaf, 0x7d, 0xd, 0x93, 0xdf, 0xbd, 0xa8, 0xdb, 0x8e, 0xda,
    0x2a, 0xc4, 0x86, 0xd8, 0x2a, 0x59, 0xb0, 0x4d, 0x52, 0xe4, 0x76, 0x62,
    0xe1, 0x78, 0x5f, 0xdc, 0x76, 0x86, 0x81, 0x10, 0x71, 0xdc, 0x86, 0x67,
    0xb1, 0xa, 0xa4, 0x0, 0x30, 0xc3, 0x63, 0xa7, 0x38, 0x67, 0x25, 0xf4, 0x5a,
    0x79, 0xf3, 0x7c, 0xa5, 0x96, 0xef, 0x90, 0xd4, 0x90, 0x3c, 0xe8, 0xa4,
    0xe4, 0x16, 0xb7, 0xec, 0x90, 0xd3, 0x73, 0xb8, 0xe8, 0xd, 0xf1, 0x4f,
    0x16, 0x5a, 0x6b, 0xd6, 0x7c, 0x42, 0x57, 0x3e, 0xeb, 0xaa, 0xc3, 0x2c,
    0x25, 0x36, 0xb7, 0x31, 0x6e, 0xe3, 0x34, 0xfe, 0x15, 0xff, 0xf8, 0xec,
    0xbb, 0xa4, 0xf7, 0xa6, 0x4e, 0x6, 0x5d, 0x31, 0xcc, 0x38, 0x7f, 0x39,
    0x5f, 0x4d, 0x2a, 0x4b, 0xd4, 0xe2, 0xd3, 0x4f, 0xec, 0x45, 0x8a, 0x51,
    0x4d, 0x6b, 0x66, 0xb3, 0x48, 0x2b, 0x64, 0x7e, 0x32, 0x1f, 0xa2, 0x78,
    0x4a, 0x8c, 0xb, 0x3c, 0x2, 0x70, 0x4c, 0x6b, 0x6b, 0xfd, 0x8e, 0x28, 0xd6,
    0x35, 0x94, 0x69, 0x67, 0xc3, 0xbd, 0xc4, 0x30, 0x15, 0x65, 0x63, 0x20,
    0x7e, 0xcd, 0x59, 0xdf, 0x31, 0x7c, 0x41, 0x47, 0x5a, 0xa3, 0xa0, 0x4a,
    0x55, 0x82, 0x93, 0x1c, 0x24, 0xc7, 0xbc, 0x19, 0x9b, 0x24, 0x73, 0xc2,
    0x3c, 0xc5, 0xa8, 0x3c, 0x6c, 0x5b, 0xb6, 0x66, 0x12, 0x18, 0x2e, 0x8,
    0xca, 0x49, 0x4e, 0xf6, 0x88, 0xb7, 0x4d, 0xef, 0xb8, 0xd2, 0x9c, 0x56,
    0xc0, 0x75, 0xd3, 0xc9, 0xba, 0x25, 0x50, 0xdd, 0xdc, 0x4c, 0xa2, 0x2c,
    0xbc, 0x6e, 0x98, 0x6a, 0x96
};

Terminal::Terminal(void) :
    m_App{ { "Bootloader Test Mode", [this](){ return BLTest(); } },
           { "Exit Terminal Mode", [this](){ return Exit(); } } }
{
    
    for (std::uint32_t i = 0U; i <= NUM_MODES; i++)
    {
        m_Apps.insert({(Mode_e) i, m_App[i]});
    }
}

Terminal::~Terminal(void)
{

}

void Terminal::Run(void)
{
    State_e state = INIT;
    Mode_e mode = NONE;
    bool_t terminate = false;

    while(1)
    {
        if (terminate)
        {
            break;
        }
        switch (state)
        {
        case INIT:
            Init();
            state = COMMAND_INPUT;
            break;
        case COMMAND_INPUT:
            mode = (Mode_e) Input();
            if (mode != NONE && mode <= NUM_MODES)
            {
                state = COMMAND_HANDLE;
            }
            break;
        case COMMAND_HANDLE:
            terminate = Handle(state, mode);
            break;
        default:
            break;
        }
    }
}

void Terminal::Menu_Helper(const std::string header,
                           const std::vector<std::string> opts)
{
    std::cout << std::flush;
#if defined (__linux__)
    if (std::system("clear") != 0U)
    {
        throw std::runtime_error("Could Not Clear Console");
    }
#elif defined (__windows__)
    std::system("cls")
#endif
    std::cout << header << std::endl <<
        "Please select an option as follows:" <<
        std::endl << std::endl;

    
    for (auto it = opts.begin(); it != opts.end(); it++)
    {
        std::cout << std::distance(opts.begin(), it) << ": " << 
            *it << std::endl;
    }

    std::cout << std::endl;
}

void Terminal::Init(void)
{
    static const std::string header = "Ahriman Terminal Interface";
    std::vector<std::string> opts;;
    for (auto const& app : m_Apps)
    {
        opts.push_back(app.second.print);
    }

    Menu_Helper(header, opts);
}

std::int32_t Terminal::Input(void)
{
    std::int32_t conv = 0U;
    std::string line = "";    

    std::getline(std::cin, line);
    std::stringstream ss(line);

    try
    {
        if( !( ss >> conv ) )
        {
            throw std::runtime_error("Invalid Input");
        }
        if (conv < 0)
        {
            throw std::runtime_error("Invalid Input");
        }
    }
    catch (std::runtime_error &e)
    {
        conv = (std::int32_t) NONE;
        std::cout << "Invalid Input Option" << std::endl;
    }

    return conv;
}

bool_t Terminal::Handle(State_e &state,
                        Mode_e mode)
{
    Action_e action = CONTINUE;
    bool_t ret = false;

    if (m_Apps.at(mode).cb)
    {
        action = m_Apps.at(mode).cb();
    }
    else
    {
        action = EXIT;
    }
    switch (action)
    {
    case EXIT:
        state = INIT;
        break;
    case TERMINATE:
        ret = true;
        break;
    case CONTINUE:
        state = COMMAND_HANDLE;
        break;
    default:
        break;
    }

    return ret;
}

Terminal::Action_e Terminal::Exit(void)
{
    return TERMINATE;
}

Terminal::Action_e Terminal::BLTest(void)
{
    static Bootloader b;
    Data d;
    Command c;
    Command::Command_Receive_e r;
    Dict_Item_t dict = 0U;
    std::uint32_t crc = 0U;
    std::uint8_t cBuf[sizeof(std::uint32_t)] = {0U};
    std::int8_t cIdx = sizeof(std::uint32_t) - 1U;

    static BL_Test_States_e state = BL_TEST_INIT;
    static bool_t printed = false;
    static const std::string hMain = "Bootloader Test Mode Interface";
    static const std::string hCommand = "Bootloader Command Interface";
    static const std::string hData = "Bootloader Data Interface";
    static const std::vector<std::string> oMain =
    {
        "Command Mode", //BL_TEST_COMMAND
        "Data Mode",    //BL_TEST_DATA
        "Offset Mode"   //BL_TEST_CRC_OFFSET
        "Exit",         //BL_TEST_EXIT
    };
    static const std::vector<std::string> oCommand =
    {
        "Send Ready",      //Command::TRANSMIT_READY
        "Send Error",      //Command::TRANSMIT_ERROR
        "Send Write",      //Command::TRANSMIT_WRITE
        "Send Run",       //Command::TRANSMIT_RUN
        "Send Validate",   //Command::TRANSMIT_VALIDATE
        "Send Erase",      //Command::TRANSMIT_ERASE
        "Send Lock",       //Command::TRANSMIT_LOCK
        "Send Unlock",     //Command::TRANSMIT_UNLOCK
        "Send Release",    //Command::TRANSMIT_RELEASE
        "Send Reset",      //Command::TRANSMIT_RESET
        "Exit",            //Command::TRANSMIT_NUM_COMMAND
    };
    static const std::vector<std::string> dCommand =
    {
        "Begin",        //Data::DATA_LENGTH
        "Exit",         //Data::DATA_NUM
    };
    std::int32_t mSize = (std::int32_t) (oMain.size()) > 0 ?
                         (std::int32_t) (oMain.size()) : 0;
    std::int32_t oSize = (std::int32_t) (oCommand.size()) > 0 ?
                          (std::int32_t) (oCommand.size()) : 0;
    std::int32_t dSize = (std::int32_t) (dCommand.size()) > 0 ?
                          (std::int32_t) (dCommand.size()) : 0;
    std::int32_t opt = state == BL_TEST_INIT ? mSize :
                       state == BL_TEST_COMMAND ? oSize : dSize;
    Action_e action = CONTINUE;

    
    switch (state)
    {
    case BL_TEST_INIT:
        if (!printed)
        {
            Menu_Helper(hMain, oMain);
            printed = true;
        }
        opt = Input();
        if (opt < mSize && opt != (std::int32_t) NONE)
        {
            state = (BL_Test_States_e) opt;
            printed = false;
        }
        break;
    case BL_TEST_COMMAND:
        if (!printed)
        {
            Menu_Helper(hCommand, oCommand);
            printed = true;
        }
        opt = Input();
        if (opt == Command::TRANSMIT_WRITE)
        {
            std::cout << "Please Enter Data Mode To Access"
                         " This Functionality" << std::endl;
        }
        if (opt == Command::TRANSMIT_NUM_COMMAND)
        {
            state = BL_TEST_INIT;
            printed = false;
        }
        else if (opt < oSize)
        {
            std::cout << "Sent Command: " << opt << std::endl;
            c.Send(b.USB, (Command::Command_Transmit_e) opt);
            c.Receive(b.USB, &dict, &r);
            std::cout << "Received Raw Value: " << std::hex << dict << std::endl;
            std::cout << "Command Value: " << r << std::endl;
        }
        break;
    case BL_TEST_DATA:
        if (!printed)
        {
            Menu_Helper(hData, dCommand);
            printed = true;
        }
        opt = Input();

        if (opt == 0U)
        {
            std::cout << "Please enter in filename of required "
                         "file to send over: ";
            std::string line = "";
            std::getline(std::cin, line);
            std::ifstream f(line, std::ios::binary);
            std::vector<unsigned char> buffer(std::istreambuf_iterator<char>(f), {});
            std::int64_t size = buffer.size();
            std::uint32_t sent = 1024;
            crc = CRC32(crc,
                        static_cast<void*>(buffer.data()),
                        (std::uint32_t) size);
            std::cout << "Calculated CRC: " << crc << std::endl;
            std::uint8_t *p = static_cast<std::uint8_t*>(buffer.data());
            while (size > (std::int64_t) (-(sizeof(std::uint32_t))))
            {
                if (size > 0)
                {
                    if (size >= 1024U)
                    {
                        sent = 1024U;
                    }
                    else
                    {
                        sent = size;
                    }
                    std::cout << "Beginning Transfer..." << std::endl;
                    c.Send(b.USB, Command::TRANSMIT_WRITE);
                    c.Receive(b.USB, &dict, &r);
                    std::cout << "Command Received: " << r << std::endl;
                    d.Send_Length(b.USB, sent);
                    c.Receive(b.USB, &dict, &r);
                    std::cout << "Command Received: " << r << std::endl;
                    d.Send_Data(b.USB, p, sent);
                    p+=sent;
                    c.Receive(b.USB, &dict, &r);
                    std::cout << "Command Received: " << r << std::endl;
                }
                else
                {
                    cBuf[cIdx--] = (std::uint8_t) (crc);
                    for (; cIdx >= 0; --cIdx)
                    {
                        cBuf[cIdx] = (std::uint8_t) (crc >>= 8U);
                    }
                    std::cout << "Beginning Transfer..." << std::endl;
                    c.Send(b.USB, Command::TRANSMIT_WRITE);
                    c.Receive(b.USB, &dict, &r);
                    std::cout << "Command Received: " << r << std::endl;
                    d.Send_Length(b.USB, 4);
                    c.Receive(b.USB, &dict, &r);
                    std::cout << "Command Received: " << r << std::endl;
                    d.Send_Data(b.USB, cBuf, 4);
                    c.Receive(b.USB, &dict, &r);
                    std::cout << "Command Received: " << r << std::endl;
                    sent = sizeof(std::uint32_t);
                }
                size-=sent;
            }
            std::cout << "Beginning Validation..." << std::endl;
            c.Send(b.USB, Command::TRANSMIT_VALIDATE);
            c.Receive(b.USB, &dict, &r);
            std::cout << "Command Received: " << r << std::endl;
        }
        else
        {
            state = BL_TEST_INIT;
            printed = false;
        }
        break;
    case BL_TEST_CRC_OFFSET:
        if (!printed)
        {
            Menu_Helper(hData, dCommand);
            printed = true;
        }
        opt = Input();

        if (opt == 0U)
        {
            std::uint32_t sent = 1024;
            crc = CRC32(crc,
                        rArray,
                        sent);
            std::cout << "Calculated CRC: " << crc << std::endl;
            std::uint8_t *p = rArray;
            std::cout << "Beginning Transfer..." << std::endl;
            c.Send(b.USB, Command::TRANSMIT_WRITE);
            c.Receive(b.USB, &dict, &r);
            std::cout << "Command Received: " << r << std::endl;
            d.Send_Length(b.USB, sent);
            c.Receive(b.USB, &dict, &r);
            std::cout << "Command Received: " << r << std::endl;
            d.Send_Data(b.USB, p, sent);
            p+=sent;
            c.Receive(b.USB, &dict, &r);
            std::cout << "Command Received: " << r << std::endl;
            cBuf[cIdx--] = (std::uint8_t) (crc);
            for (; cIdx >= 0; --cIdx)
            {
                cBuf[cIdx] = (std::uint8_t) (crc >>= 8U);
            }
            std::cout << "Beginning Transfer..." << std::endl;
            c.Send(b.USB, Command::TRANSMIT_WRITE);
            c.Receive(b.USB, &dict, &r);
            std::cout << "Command Received: " << r << std::endl;
            d.Send_Length(b.USB, 4);
            c.Receive(b.USB, &dict, &r);
            std::cout << "Command Received: " << r << std::endl;
            d.Send_Data(b.USB, cBuf, 4);
            c.Receive(b.USB, &dict, &r);
            std::cout << "Command Received: " << r << std::endl;
            sent = sizeof(std::uint32_t);
            std::cout << "Beginning Validation..." << std::endl;
            c.Send(b.USB, Command::TRANSMIT_VALIDATE);
            c.Receive(b.USB, &dict, &r);
            std::cout << "Command Received: " << r << std::endl;
        }
        else
        {
            state = BL_TEST_INIT;
            printed = false;
        }
        break;
    case BL_TEST_EXIT:
        state = BL_TEST_INIT;
        action = EXIT;
    default:
        break;
    }

    return action;
}

/**@} terminal */

